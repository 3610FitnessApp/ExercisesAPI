// <auto-generated />
using Exercises.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Exercises.Api.Migrations
{
    [DbContext(typeof(ExerciseContext))]
    [Migration("20180410223355_updatedModels2")]
    partial class updatedModels2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Exercises.Api.Data.BodyPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("BodyParts");
                });

            modelBuilder.Entity("Exercises.Api.Data.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Exercises.Api.Data.ExerciseBodyPart", b =>
                {
                    b.Property<int>("exerciseId");

                    b.Property<int>("bodyPartId");

                    b.HasKey("exerciseId", "bodyPartId");

                    b.ToTable("ExerciseBodyParts");
                });

            modelBuilder.Entity("Exercises.Api.Data.ExerciseInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("WorkoutInstanceId");

                    b.Property<int?>("exerciseId");

                    b.Property<int>("reps");

                    b.Property<int>("sets");

                    b.Property<string>("userId");

                    b.Property<int>("weight");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutInstanceId");

                    b.HasIndex("exerciseId");

                    b.HasIndex("userId");

                    b.ToTable("ExerciseInstances");
                });

            modelBuilder.Entity("Exercises.Api.Data.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("daysPerWeek");

                    b.Property<string>("programName");

                    b.Property<int>("week");

                    b.HasKey("Id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Exercises.Api.Data.ProgramInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("programId");

                    b.Property<int>("userId");

                    b.Property<string>("userId1");

                    b.HasKey("Id");

                    b.HasIndex("programId");

                    b.HasIndex("userId1");

                    b.ToTable("ProgramInstances");
                });

            modelBuilder.Entity("Exercises.Api.Data.ProgramWorkout", b =>
                {
                    b.Property<int>("workoutId");

                    b.Property<int>("programId");

                    b.HasKey("workoutId", "programId");

                    b.HasIndex("programId");

                    b.ToTable("ProgramWorkouts");
                });

            modelBuilder.Entity("Exercises.Api.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("firstName");

                    b.Property<int>("height");

                    b.Property<string>("lastName");

                    b.Property<int>("skillLevel");

                    b.Property<int>("weight");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Exercises.Api.Data.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Exercises.Api.Data.WorkoutExercise", b =>
                {
                    b.Property<int>("exerciseId");

                    b.Property<int>("workoutId");

                    b.HasKey("exerciseId", "workoutId");

                    b.HasIndex("workoutId");

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("Exercises.Api.Data.WorkoutInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("ProgramInstanceId");

                    b.Property<DateTime>("date");

                    b.Property<int>("userId");

                    b.Property<string>("userId1");

                    b.Property<int?>("workoutId");

                    b.HasKey("Id");

                    b.HasIndex("ProgramInstanceId");

                    b.HasIndex("userId1");

                    b.HasIndex("workoutId");

                    b.ToTable("WorkoutInstances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Exercises.Api.Data.ExerciseBodyPart", b =>
                {
                    b.HasOne("Exercises.Api.Data.Exercise")
                        .WithMany("ExerciseBodyPart")
                        .HasForeignKey("exerciseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exercises.Api.Data.ExerciseInstance", b =>
                {
                    b.HasOne("Exercises.Api.Data.WorkoutInstance")
                        .WithMany("exercises")
                        .HasForeignKey("WorkoutInstanceId");

                    b.HasOne("Exercises.Api.Data.Exercise", "exercise")
                        .WithMany()
                        .HasForeignKey("exerciseId");

                    b.HasOne("Exercises.Api.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Exercises.Api.Data.ProgramInstance", b =>
                {
                    b.HasOne("Exercises.Api.Data.Program", "program")
                        .WithMany()
                        .HasForeignKey("programId");

                    b.HasOne("Exercises.Api.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId1");
                });

            modelBuilder.Entity("Exercises.Api.Data.ProgramWorkout", b =>
                {
                    b.HasOne("Exercises.Api.Data.Program")
                        .WithMany("Workouts")
                        .HasForeignKey("programId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exercises.Api.Data.WorkoutExercise", b =>
                {
                    b.HasOne("Exercises.Api.Data.Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("workoutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exercises.Api.Data.WorkoutInstance", b =>
                {
                    b.HasOne("Exercises.Api.Data.ProgramInstance")
                        .WithMany("workouts")
                        .HasForeignKey("ProgramInstanceId");

                    b.HasOne("Exercises.Api.Data.User", "user")
                        .WithMany()
                        .HasForeignKey("userId1");

                    b.HasOne("Exercises.Api.Data.Workout", "workout")
                        .WithMany()
                        .HasForeignKey("workoutId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Exercises.Api.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Exercises.Api.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exercises.Api.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Exercises.Api.Data.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
